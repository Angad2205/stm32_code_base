
Single_stepping_stepping_over_and_stepping_out_Debug_Techniques.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001588  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08001718  08001718  00002718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001854  08001854  000030a4  2**0
                  CONTENTS
  4 .ARM          00000008  08001854  08001854  00002854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800185c  0800185c  000030a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001860  08001860  00002860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08001864  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000030a4  2**0
                  CONTENTS
 10 .bss          0000016c  200000a4  200000a4  000030a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  000030a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000acf  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f0  00000000  00000000  00003ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d58  00000000  00000000  000041a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015f5  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009854  00000000  00000000  000084f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011d49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e58  00000000  00000000  00011d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  00012be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001700 	.word	0x08001700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08001700 	.word	0x08001700

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e015      	b.n	80002ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000280:	f000 fa10 	bl	80006a4 <rand>
 8000284:	4602      	mov	r2, r0
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	4419      	add	r1, r3
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <array_fill_numbers+0x50>)
 8000290:	fb83 0302 	smull	r0, r3, r3, r2
 8000294:	1198      	asrs	r0, r3, #6
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac3      	subs	r3, r0, r3
 800029a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800029e:	fb00 f303 	mul.w	r3, r0, r3
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d3e5      	bcc.n	8000280 <array_fill_numbers+0x10>
    }

}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	10624dd3 	.word	0x10624dd3

080002c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	480e      	ldr	r0, [pc, #56]	@ (800030c <display_numbers+0x48>)
 80002d4:	f000 fae6 	bl	80008a4 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	e00b      	b.n	80002f6 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4413      	add	r3, r2
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4809      	ldr	r0, [pc, #36]	@ (8000310 <display_numbers+0x4c>)
 80002ec:	f000 fada 	bl	80008a4 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697a      	ldr	r2, [r7, #20]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d3ef      	bcc.n	80002de <display_numbers+0x1a>
    }

    printf("\n");
 80002fe:	200a      	movs	r0, #10
 8000300:	f000 fae2 	bl	80008c8 <putchar>
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08001718 	.word	0x08001718
 8000310:	0800171c 	.word	0x0800171c

08000314 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000332:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <swap_numbers+0x30>)
 8000334:	220a      	movs	r2, #10
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000044 	.word	0x20000044

08000348 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e02f      	b.n	80003bc <bubble_sort+0x74>
    {
        flag=0;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	e01d      	b.n	80003a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	3301      	adds	r3, #1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	dd0d      	ble.n	800039c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	18d0      	adds	r0, r2, r3
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	3301      	adds	r3, #1
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4619      	mov	r1, r3
 8000394:	f7ff ffbe 	bl	8000314 <swap_numbers>
                flag=1;
 8000398:	2301      	movs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3301      	adds	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	1e5a      	subs	r2, r3, #1
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d8da      	bhi.n	8000366 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	1e5a      	subs	r2, r3, #1
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d8ca      	bhi.n	800035c <bubble_sort+0x14>
            break;
    }
}
 80003c6:	e000      	b.n	80003ca <bubble_sort+0x82>
            break;
 80003c8:	bf00      	nop
}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b087      	sub	sp, #28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e02c      	b.n	800043c <insertion_sort+0x6a>
     {
         j=i-1;
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80003f4:	e00d      	b.n	8000412 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	441a      	add	r2, r3
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	3301      	adds	r3, #1
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	440b      	add	r3, r1
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	601a      	str	r2, [r3, #0]
             j--;
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3b01      	subs	r3, #1
 8000410:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db07      	blt.n	8000428 <insertion_sort+0x56>
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbe6      	blt.n	80003f6 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3301      	adds	r3, #1
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	429a      	cmp	r2, r3
 8000442:	d8ce      	bhi.n	80003e2 <insertion_sort+0x10>
     }


}
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	371c      	adds	r7, #28
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <main>:



int main()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 800045a:	2311      	movs	r3, #17
 800045c:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	4813      	ldr	r0, [pc, #76]	@ (80004b0 <main+0x5c>)
 8000462:	f7ff ff05 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000466:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <main+0x60>)
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	4811      	ldr	r0, [pc, #68]	@ (80004b0 <main+0x5c>)
 800046c:	f7ff ff2a 	bl	80002c4 <display_numbers>

    bubble_sort(numbers,len);
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	480f      	ldr	r0, [pc, #60]	@ (80004b0 <main+0x5c>)
 8000474:	f7ff ff68 	bl	8000348 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000478:	4a0f      	ldr	r2, [pc, #60]	@ (80004b8 <main+0x64>)
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <main+0x5c>)
 800047e:	f7ff ff21 	bl	80002c4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	480a      	ldr	r0, [pc, #40]	@ (80004b0 <main+0x5c>)
 8000486:	f7ff fef3 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800048a:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <main+0x68>)
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	4808      	ldr	r0, [pc, #32]	@ (80004b0 <main+0x5c>)
 8000490:	f7ff ff18 	bl	80002c4 <display_numbers>

    insertion_sort(numbers,len);
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4806      	ldr	r0, [pc, #24]	@ (80004b0 <main+0x5c>)
 8000498:	f7ff ff9b 	bl	80003d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 800049c:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <main+0x6c>)
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <main+0x5c>)
 80004a2:	f7ff ff0f 	bl	80002c4 <display_numbers>



    return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	08001724 	.word	0x08001724
 80004b8:	08001738 	.word	0x08001738
 80004bc:	0800174c 	.word	0x0800174c
 80004c0:	08001760 	.word	0x08001760

080004c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return 1;
 80004c8:	2301      	movs	r3, #1
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <_kill>:

int _kill(int pid, int sig)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80004de:	f000 fa8d 	bl	80009fc <__errno>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2216      	movs	r2, #22
 80004e6:	601a      	str	r2, [r3, #0]
  return -1;
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <_exit>:

void _exit (int status)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80004fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff ffe7 	bl	80004d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <_exit+0x12>

0800050a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e00a      	b.n	8000532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051c:	f3af 8000 	nop.w
 8000520:	4601      	mov	r1, r0
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	b2ca      	uxtb	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	dbf0      	blt.n	800051c <_read+0x12>
  }

  return len;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e009      	b.n	800056a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	60ba      	str	r2, [r7, #8]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	3301      	adds	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	429a      	cmp	r2, r3
 8000570:	dbf1      	blt.n	8000556 <_write+0x12>
  }
  return len;
 8000572:	687b      	ldr	r3, [r7, #4]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <_close>:

int _close(int file)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a4:	605a      	str	r2, [r3, #4]
  return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_isatty>:

int _isatty(int file)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f000 f9f2 	bl	80009fc <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20020000 	.word	0x20020000
 8000644:	00000400 	.word	0x00000400
 8000648:	200000c0 	.word	0x200000c0
 800064c:	20000210 	.word	0x20000210

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	@ (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	@ (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f9c3 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fee7 	bl	8000454 <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000694:	08001864 	.word	0x08001864
  ldr r2, =_sbss
 8000698:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800069c:	20000210 	.word	0x20000210

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <rand>:
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <rand+0x5c>)
 80006a6:	b510      	push	{r4, lr}
 80006a8:	681c      	ldr	r4, [r3, #0]
 80006aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80006ac:	b9b3      	cbnz	r3, 80006dc <rand+0x38>
 80006ae:	2018      	movs	r0, #24
 80006b0:	f000 fa3a 	bl	8000b28 <malloc>
 80006b4:	4602      	mov	r2, r0
 80006b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80006b8:	b920      	cbnz	r0, 80006c4 <rand+0x20>
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <rand+0x60>)
 80006bc:	4812      	ldr	r0, [pc, #72]	@ (8000708 <rand+0x64>)
 80006be:	2152      	movs	r1, #82	@ 0x52
 80006c0:	f000 f9ca 	bl	8000a58 <__assert_func>
 80006c4:	4911      	ldr	r1, [pc, #68]	@ (800070c <rand+0x68>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <rand+0x6c>)
 80006c8:	e9c0 1300 	strd	r1, r3, [r0]
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <rand+0x70>)
 80006ce:	6083      	str	r3, [r0, #8]
 80006d0:	230b      	movs	r3, #11
 80006d2:	8183      	strh	r3, [r0, #12]
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
 80006d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80006dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <rand+0x74>)
 80006e0:	690b      	ldr	r3, [r1, #16]
 80006e2:	694c      	ldr	r4, [r1, #20]
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <rand+0x78>)
 80006e6:	4358      	muls	r0, r3
 80006e8:	fb02 0004 	mla	r0, r2, r4, r0
 80006ec:	fba3 3202 	umull	r3, r2, r3, r2
 80006f0:	3301      	adds	r3, #1
 80006f2:	eb40 0002 	adc.w	r0, r0, r2
 80006f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80006fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80006fe:	bd10      	pop	{r4, pc}
 8000700:	20000054 	.word	0x20000054
 8000704:	08001773 	.word	0x08001773
 8000708:	0800178a 	.word	0x0800178a
 800070c:	abcd330e 	.word	0xabcd330e
 8000710:	e66d1234 	.word	0xe66d1234
 8000714:	0005deec 	.word	0x0005deec
 8000718:	5851f42d 	.word	0x5851f42d
 800071c:	4c957f2d 	.word	0x4c957f2d

08000720 <std>:
 8000720:	2300      	movs	r3, #0
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	e9c0 3300 	strd	r3, r3, [r0]
 800072a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072e:	6083      	str	r3, [r0, #8]
 8000730:	8181      	strh	r1, [r0, #12]
 8000732:	6643      	str	r3, [r0, #100]	@ 0x64
 8000734:	81c2      	strh	r2, [r0, #14]
 8000736:	6183      	str	r3, [r0, #24]
 8000738:	4619      	mov	r1, r3
 800073a:	2208      	movs	r2, #8
 800073c:	305c      	adds	r0, #92	@ 0x5c
 800073e:	f000 f90e 	bl	800095e <memset>
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x58>)
 8000744:	6263      	str	r3, [r4, #36]	@ 0x24
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <std+0x5c>)
 8000748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <std+0x60>)
 800074c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <std+0x64>)
 8000750:	6323      	str	r3, [r4, #48]	@ 0x30
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <std+0x68>)
 8000754:	6224      	str	r4, [r4, #32]
 8000756:	429c      	cmp	r4, r3
 8000758:	d006      	beq.n	8000768 <std+0x48>
 800075a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800075e:	4294      	cmp	r4, r2
 8000760:	d002      	beq.n	8000768 <std+0x48>
 8000762:	33d0      	adds	r3, #208	@ 0xd0
 8000764:	429c      	cmp	r4, r3
 8000766:	d105      	bne.n	8000774 <std+0x54>
 8000768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 b96e 	b.w	8000a50 <__retarget_lock_init_recursive>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	080008d9 	.word	0x080008d9
 800077c:	080008fb 	.word	0x080008fb
 8000780:	08000933 	.word	0x08000933
 8000784:	08000957 	.word	0x08000957
 8000788:	200000c4 	.word	0x200000c4

0800078c <stdio_exit_handler>:
 800078c:	4a02      	ldr	r2, [pc, #8]	@ (8000798 <stdio_exit_handler+0xc>)
 800078e:	4903      	ldr	r1, [pc, #12]	@ (800079c <stdio_exit_handler+0x10>)
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <stdio_exit_handler+0x14>)
 8000792:	f000 b869 	b.w	8000868 <_fwalk_sglue>
 8000796:	bf00      	nop
 8000798:	20000048 	.word	0x20000048
 800079c:	0800133d 	.word	0x0800133d
 80007a0:	20000058 	.word	0x20000058

080007a4 <cleanup_stdio>:
 80007a4:	6841      	ldr	r1, [r0, #4]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <cleanup_stdio+0x34>)
 80007a8:	4299      	cmp	r1, r3
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	d001      	beq.n	80007b4 <cleanup_stdio+0x10>
 80007b0:	f000 fdc4 	bl	800133c <_fflush_r>
 80007b4:	68a1      	ldr	r1, [r4, #8]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <cleanup_stdio+0x38>)
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d002      	beq.n	80007c2 <cleanup_stdio+0x1e>
 80007bc:	4620      	mov	r0, r4
 80007be:	f000 fdbd 	bl	800133c <_fflush_r>
 80007c2:	68e1      	ldr	r1, [r4, #12]
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <cleanup_stdio+0x3c>)
 80007c6:	4299      	cmp	r1, r3
 80007c8:	d004      	beq.n	80007d4 <cleanup_stdio+0x30>
 80007ca:	4620      	mov	r0, r4
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f000 bdb4 	b.w	800133c <_fflush_r>
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	2000012c 	.word	0x2000012c
 80007e0:	20000194 	.word	0x20000194

080007e4 <global_stdio_init.part.0>:
 80007e4:	b510      	push	{r4, lr}
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <global_stdio_init.part.0+0x30>)
 80007e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000818 <global_stdio_init.part.0+0x34>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	@ (800081c <global_stdio_init.part.0+0x38>)
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	4620      	mov	r0, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	f7ff ff94 	bl	8000720 <std>
 80007f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007fc:	2201      	movs	r2, #1
 80007fe:	2109      	movs	r1, #9
 8000800:	f7ff ff8e 	bl	8000720 <std>
 8000804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000808:	2202      	movs	r2, #2
 800080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080e:	2112      	movs	r1, #18
 8000810:	f7ff bf86 	b.w	8000720 <std>
 8000814:	200001fc 	.word	0x200001fc
 8000818:	200000c4 	.word	0x200000c4
 800081c:	0800078d 	.word	0x0800078d

08000820 <__sfp_lock_acquire>:
 8000820:	4801      	ldr	r0, [pc, #4]	@ (8000828 <__sfp_lock_acquire+0x8>)
 8000822:	f000 b916 	b.w	8000a52 <__retarget_lock_acquire_recursive>
 8000826:	bf00      	nop
 8000828:	20000205 	.word	0x20000205

0800082c <__sfp_lock_release>:
 800082c:	4801      	ldr	r0, [pc, #4]	@ (8000834 <__sfp_lock_release+0x8>)
 800082e:	f000 b911 	b.w	8000a54 <__retarget_lock_release_recursive>
 8000832:	bf00      	nop
 8000834:	20000205 	.word	0x20000205

08000838 <__sinit>:
 8000838:	b510      	push	{r4, lr}
 800083a:	4604      	mov	r4, r0
 800083c:	f7ff fff0 	bl	8000820 <__sfp_lock_acquire>
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	b11b      	cbz	r3, 800084c <__sinit+0x14>
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f7ff bff0 	b.w	800082c <__sfp_lock_release>
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <__sinit+0x28>)
 800084e:	6223      	str	r3, [r4, #32]
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <__sinit+0x2c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f5      	bne.n	8000844 <__sinit+0xc>
 8000858:	f7ff ffc4 	bl	80007e4 <global_stdio_init.part.0>
 800085c:	e7f2      	b.n	8000844 <__sinit+0xc>
 800085e:	bf00      	nop
 8000860:	080007a5 	.word	0x080007a5
 8000864:	200001fc 	.word	0x200001fc

08000868 <_fwalk_sglue>:
 8000868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800086c:	4607      	mov	r7, r0
 800086e:	4688      	mov	r8, r1
 8000870:	4614      	mov	r4, r2
 8000872:	2600      	movs	r6, #0
 8000874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000878:	f1b9 0901 	subs.w	r9, r9, #1
 800087c:	d505      	bpl.n	800088a <_fwalk_sglue+0x22>
 800087e:	6824      	ldr	r4, [r4, #0]
 8000880:	2c00      	cmp	r4, #0
 8000882:	d1f7      	bne.n	8000874 <_fwalk_sglue+0xc>
 8000884:	4630      	mov	r0, r6
 8000886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800088a:	89ab      	ldrh	r3, [r5, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d907      	bls.n	80008a0 <_fwalk_sglue+0x38>
 8000890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000894:	3301      	adds	r3, #1
 8000896:	d003      	beq.n	80008a0 <_fwalk_sglue+0x38>
 8000898:	4629      	mov	r1, r5
 800089a:	4638      	mov	r0, r7
 800089c:	47c0      	blx	r8
 800089e:	4306      	orrs	r6, r0
 80008a0:	3568      	adds	r5, #104	@ 0x68
 80008a2:	e7e9      	b.n	8000878 <_fwalk_sglue+0x10>

080008a4 <iprintf>:
 80008a4:	b40f      	push	{r0, r1, r2, r3}
 80008a6:	b507      	push	{r0, r1, r2, lr}
 80008a8:	4906      	ldr	r1, [pc, #24]	@ (80008c4 <iprintf+0x20>)
 80008aa:	ab04      	add	r3, sp, #16
 80008ac:	6808      	ldr	r0, [r1, #0]
 80008ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80008b2:	6881      	ldr	r1, [r0, #8]
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	f000 fa17 	bl	8000ce8 <_vfiprintf_r>
 80008ba:	b003      	add	sp, #12
 80008bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr
 80008c4:	20000054 	.word	0x20000054

080008c8 <putchar>:
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <putchar+0xc>)
 80008ca:	4601      	mov	r1, r0
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	6882      	ldr	r2, [r0, #8]
 80008d0:	f000 bd6e 	b.w	80013b0 <_putc_r>
 80008d4:	20000054 	.word	0x20000054

080008d8 <__sread>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	460c      	mov	r4, r1
 80008dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e0:	f000 f868 	bl	80009b4 <_read_r>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	bfab      	itete	ge
 80008e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ea:	89a3      	ldrhlt	r3, [r4, #12]
 80008ec:	181b      	addge	r3, r3, r0
 80008ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008f2:	bfac      	ite	ge
 80008f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008f6:	81a3      	strhlt	r3, [r4, #12]
 80008f8:	bd10      	pop	{r4, pc}

080008fa <__swrite>:
 80008fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008fe:	461f      	mov	r7, r3
 8000900:	898b      	ldrh	r3, [r1, #12]
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	4605      	mov	r5, r0
 8000906:	460c      	mov	r4, r1
 8000908:	4616      	mov	r6, r2
 800090a:	d505      	bpl.n	8000918 <__swrite+0x1e>
 800090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000910:	2302      	movs	r3, #2
 8000912:	2200      	movs	r2, #0
 8000914:	f000 f83c 	bl	8000990 <_lseek_r>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800091e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	4632      	mov	r2, r6
 8000926:	463b      	mov	r3, r7
 8000928:	4628      	mov	r0, r5
 800092a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800092e:	f000 b853 	b.w	80009d8 <_write_r>

08000932 <__sseek>:
 8000932:	b510      	push	{r4, lr}
 8000934:	460c      	mov	r4, r1
 8000936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093a:	f000 f829 	bl	8000990 <_lseek_r>
 800093e:	1c43      	adds	r3, r0, #1
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	bf15      	itete	ne
 8000944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800094a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800094e:	81a3      	strheq	r3, [r4, #12]
 8000950:	bf18      	it	ne
 8000952:	81a3      	strhne	r3, [r4, #12]
 8000954:	bd10      	pop	{r4, pc}

08000956 <__sclose>:
 8000956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095a:	f000 b809 	b.w	8000970 <_close_r>

0800095e <memset>:
 800095e:	4402      	add	r2, r0
 8000960:	4603      	mov	r3, r0
 8000962:	4293      	cmp	r3, r2
 8000964:	d100      	bne.n	8000968 <memset+0xa>
 8000966:	4770      	bx	lr
 8000968:	f803 1b01 	strb.w	r1, [r3], #1
 800096c:	e7f9      	b.n	8000962 <memset+0x4>
	...

08000970 <_close_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d06      	ldr	r5, [pc, #24]	@ (800098c <_close_r+0x1c>)
 8000974:	2300      	movs	r3, #0
 8000976:	4604      	mov	r4, r0
 8000978:	4608      	mov	r0, r1
 800097a:	602b      	str	r3, [r5, #0]
 800097c:	f7ff fdfe 	bl	800057c <_close>
 8000980:	1c43      	adds	r3, r0, #1
 8000982:	d102      	bne.n	800098a <_close_r+0x1a>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	b103      	cbz	r3, 800098a <_close_r+0x1a>
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	bd38      	pop	{r3, r4, r5, pc}
 800098c:	20000200 	.word	0x20000200

08000990 <_lseek_r>:
 8000990:	b538      	push	{r3, r4, r5, lr}
 8000992:	4d07      	ldr	r5, [pc, #28]	@ (80009b0 <_lseek_r+0x20>)
 8000994:	4604      	mov	r4, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4611      	mov	r1, r2
 800099a:	2200      	movs	r2, #0
 800099c:	602a      	str	r2, [r5, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	f7ff fe13 	bl	80005ca <_lseek>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	d102      	bne.n	80009ae <_lseek_r+0x1e>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	b103      	cbz	r3, 80009ae <_lseek_r+0x1e>
 80009ac:	6023      	str	r3, [r4, #0]
 80009ae:	bd38      	pop	{r3, r4, r5, pc}
 80009b0:	20000200 	.word	0x20000200

080009b4 <_read_r>:
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4d07      	ldr	r5, [pc, #28]	@ (80009d4 <_read_r+0x20>)
 80009b8:	4604      	mov	r4, r0
 80009ba:	4608      	mov	r0, r1
 80009bc:	4611      	mov	r1, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	602a      	str	r2, [r5, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f7ff fda1 	bl	800050a <_read>
 80009c8:	1c43      	adds	r3, r0, #1
 80009ca:	d102      	bne.n	80009d2 <_read_r+0x1e>
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	b103      	cbz	r3, 80009d2 <_read_r+0x1e>
 80009d0:	6023      	str	r3, [r4, #0]
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	20000200 	.word	0x20000200

080009d8 <_write_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4d07      	ldr	r5, [pc, #28]	@ (80009f8 <_write_r+0x20>)
 80009dc:	4604      	mov	r4, r0
 80009de:	4608      	mov	r0, r1
 80009e0:	4611      	mov	r1, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	602a      	str	r2, [r5, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f7ff fdac 	bl	8000544 <_write>
 80009ec:	1c43      	adds	r3, r0, #1
 80009ee:	d102      	bne.n	80009f6 <_write_r+0x1e>
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	b103      	cbz	r3, 80009f6 <_write_r+0x1e>
 80009f4:	6023      	str	r3, [r4, #0]
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	20000200 	.word	0x20000200

080009fc <__errno>:
 80009fc:	4b01      	ldr	r3, [pc, #4]	@ (8000a04 <__errno+0x8>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000054 	.word	0x20000054

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a40 <__libc_init_array+0x38>)
 8000a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a44 <__libc_init_array+0x3c>)
 8000a0e:	1b64      	subs	r4, r4, r5
 8000a10:	10a4      	asrs	r4, r4, #2
 8000a12:	2600      	movs	r6, #0
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	4d0b      	ldr	r5, [pc, #44]	@ (8000a48 <__libc_init_array+0x40>)
 8000a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a4c <__libc_init_array+0x44>)
 8000a1c:	f000 fe70 	bl	8001700 <_init>
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	2600      	movs	r6, #0
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	0800185c 	.word	0x0800185c
 8000a44:	0800185c 	.word	0x0800185c
 8000a48:	0800185c 	.word	0x0800185c
 8000a4c:	08001860 	.word	0x08001860

08000a50 <__retarget_lock_init_recursive>:
 8000a50:	4770      	bx	lr

08000a52 <__retarget_lock_acquire_recursive>:
 8000a52:	4770      	bx	lr

08000a54 <__retarget_lock_release_recursive>:
 8000a54:	4770      	bx	lr
	...

08000a58 <__assert_func>:
 8000a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a5a:	4614      	mov	r4, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <__assert_func+0x2c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4605      	mov	r5, r0
 8000a64:	68d8      	ldr	r0, [r3, #12]
 8000a66:	b954      	cbnz	r4, 8000a7e <__assert_func+0x26>
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <__assert_func+0x30>)
 8000a6a:	461c      	mov	r4, r3
 8000a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a70:	9100      	str	r1, [sp, #0]
 8000a72:	462b      	mov	r3, r5
 8000a74:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <__assert_func+0x34>)
 8000a76:	f000 fc89 	bl	800138c <fiprintf>
 8000a7a:	f000 fd71 	bl	8001560 <abort>
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__assert_func+0x38>)
 8000a80:	e7f4      	b.n	8000a6c <__assert_func+0x14>
 8000a82:	bf00      	nop
 8000a84:	20000054 	.word	0x20000054
 8000a88:	0800181d 	.word	0x0800181d
 8000a8c:	080017ef 	.word	0x080017ef
 8000a90:	080017e2 	.word	0x080017e2

08000a94 <_free_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4605      	mov	r5, r0
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d041      	beq.n	8000b20 <_free_r+0x8c>
 8000a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000aa0:	1f0c      	subs	r4, r1, #4
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bfb8      	it	lt
 8000aa6:	18e4      	addlt	r4, r4, r3
 8000aa8:	f000 f8e8 	bl	8000c7c <__malloc_lock>
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <_free_r+0x90>)
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	b933      	cbnz	r3, 8000ac0 <_free_r+0x2c>
 8000ab2:	6063      	str	r3, [r4, #4]
 8000ab4:	6014      	str	r4, [r2, #0]
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000abc:	f000 b8e4 	b.w	8000c88 <__malloc_unlock>
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d908      	bls.n	8000ad6 <_free_r+0x42>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	1821      	adds	r1, r4, r0
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	bf01      	itttt	eq
 8000acc:	6819      	ldreq	r1, [r3, #0]
 8000ace:	685b      	ldreq	r3, [r3, #4]
 8000ad0:	1809      	addeq	r1, r1, r0
 8000ad2:	6021      	streq	r1, [r4, #0]
 8000ad4:	e7ed      	b.n	8000ab2 <_free_r+0x1e>
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b10b      	cbz	r3, 8000ae0 <_free_r+0x4c>
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d9fa      	bls.n	8000ad6 <_free_r+0x42>
 8000ae0:	6811      	ldr	r1, [r2, #0]
 8000ae2:	1850      	adds	r0, r2, r1
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d10b      	bne.n	8000b00 <_free_r+0x6c>
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	4401      	add	r1, r0
 8000aec:	1850      	adds	r0, r2, r1
 8000aee:	4283      	cmp	r3, r0
 8000af0:	6011      	str	r1, [r2, #0]
 8000af2:	d1e0      	bne.n	8000ab6 <_free_r+0x22>
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	6053      	str	r3, [r2, #4]
 8000afa:	4408      	add	r0, r1
 8000afc:	6010      	str	r0, [r2, #0]
 8000afe:	e7da      	b.n	8000ab6 <_free_r+0x22>
 8000b00:	d902      	bls.n	8000b08 <_free_r+0x74>
 8000b02:	230c      	movs	r3, #12
 8000b04:	602b      	str	r3, [r5, #0]
 8000b06:	e7d6      	b.n	8000ab6 <_free_r+0x22>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	1821      	adds	r1, r4, r0
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bf04      	itt	eq
 8000b10:	6819      	ldreq	r1, [r3, #0]
 8000b12:	685b      	ldreq	r3, [r3, #4]
 8000b14:	6063      	str	r3, [r4, #4]
 8000b16:	bf04      	itt	eq
 8000b18:	1809      	addeq	r1, r1, r0
 8000b1a:	6021      	streq	r1, [r4, #0]
 8000b1c:	6054      	str	r4, [r2, #4]
 8000b1e:	e7ca      	b.n	8000ab6 <_free_r+0x22>
 8000b20:	bd38      	pop	{r3, r4, r5, pc}
 8000b22:	bf00      	nop
 8000b24:	2000020c 	.word	0x2000020c

08000b28 <malloc>:
 8000b28:	4b02      	ldr	r3, [pc, #8]	@ (8000b34 <malloc+0xc>)
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f000 b825 	b.w	8000b7c <_malloc_r>
 8000b32:	bf00      	nop
 8000b34:	20000054 	.word	0x20000054

08000b38 <sbrk_aligned>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b78 <sbrk_aligned+0x40>)
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	6831      	ldr	r1, [r6, #0]
 8000b40:	4605      	mov	r5, r0
 8000b42:	b911      	cbnz	r1, 8000b4a <sbrk_aligned+0x12>
 8000b44:	f000 fcfc 	bl	8001540 <_sbrk_r>
 8000b48:	6030      	str	r0, [r6, #0]
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 fcf7 	bl	8001540 <_sbrk_r>
 8000b52:	1c43      	adds	r3, r0, #1
 8000b54:	d103      	bne.n	8000b5e <sbrk_aligned+0x26>
 8000b56:	f04f 34ff 	mov.w	r4, #4294967295
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
 8000b5e:	1cc4      	adds	r4, r0, #3
 8000b60:	f024 0403 	bic.w	r4, r4, #3
 8000b64:	42a0      	cmp	r0, r4
 8000b66:	d0f8      	beq.n	8000b5a <sbrk_aligned+0x22>
 8000b68:	1a21      	subs	r1, r4, r0
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 fce8 	bl	8001540 <_sbrk_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	d1f2      	bne.n	8000b5a <sbrk_aligned+0x22>
 8000b74:	e7ef      	b.n	8000b56 <sbrk_aligned+0x1e>
 8000b76:	bf00      	nop
 8000b78:	20000208 	.word	0x20000208

08000b7c <_malloc_r>:
 8000b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b80:	1ccd      	adds	r5, r1, #3
 8000b82:	f025 0503 	bic.w	r5, r5, #3
 8000b86:	3508      	adds	r5, #8
 8000b88:	2d0c      	cmp	r5, #12
 8000b8a:	bf38      	it	cc
 8000b8c:	250c      	movcc	r5, #12
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	4606      	mov	r6, r0
 8000b92:	db01      	blt.n	8000b98 <_malloc_r+0x1c>
 8000b94:	42a9      	cmp	r1, r5
 8000b96:	d904      	bls.n	8000ba2 <_malloc_r+0x26>
 8000b98:	230c      	movs	r3, #12
 8000b9a:	6033      	str	r3, [r6, #0]
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c78 <_malloc_r+0xfc>
 8000ba6:	f000 f869 	bl	8000c7c <__malloc_lock>
 8000baa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bae:	461c      	mov	r4, r3
 8000bb0:	bb44      	cbnz	r4, 8000c04 <_malloc_r+0x88>
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f7ff ffbf 	bl	8000b38 <sbrk_aligned>
 8000bba:	1c43      	adds	r3, r0, #1
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	d158      	bne.n	8000c72 <_malloc_r+0xf6>
 8000bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc4:	4627      	mov	r7, r4
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d143      	bne.n	8000c52 <_malloc_r+0xd6>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d04b      	beq.n	8000c66 <_malloc_r+0xea>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	eb04 0903 	add.w	r9, r4, r3
 8000bd8:	f000 fcb2 	bl	8001540 <_sbrk_r>
 8000bdc:	4581      	cmp	r9, r0
 8000bde:	d142      	bne.n	8000c66 <_malloc_r+0xea>
 8000be0:	6821      	ldr	r1, [r4, #0]
 8000be2:	1a6d      	subs	r5, r5, r1
 8000be4:	4629      	mov	r1, r5
 8000be6:	4630      	mov	r0, r6
 8000be8:	f7ff ffa6 	bl	8000b38 <sbrk_aligned>
 8000bec:	3001      	adds	r0, #1
 8000bee:	d03a      	beq.n	8000c66 <_malloc_r+0xea>
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	442b      	add	r3, r5
 8000bf4:	6023      	str	r3, [r4, #0]
 8000bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	bb62      	cbnz	r2, 8000c58 <_malloc_r+0xdc>
 8000bfe:	f8c8 7000 	str.w	r7, [r8]
 8000c02:	e00f      	b.n	8000c24 <_malloc_r+0xa8>
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	1b52      	subs	r2, r2, r5
 8000c08:	d420      	bmi.n	8000c4c <_malloc_r+0xd0>
 8000c0a:	2a0b      	cmp	r2, #11
 8000c0c:	d917      	bls.n	8000c3e <_malloc_r+0xc2>
 8000c0e:	1961      	adds	r1, r4, r5
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	6025      	str	r5, [r4, #0]
 8000c14:	bf18      	it	ne
 8000c16:	6059      	strne	r1, [r3, #4]
 8000c18:	6863      	ldr	r3, [r4, #4]
 8000c1a:	bf08      	it	eq
 8000c1c:	f8c8 1000 	streq.w	r1, [r8]
 8000c20:	5162      	str	r2, [r4, r5]
 8000c22:	604b      	str	r3, [r1, #4]
 8000c24:	4630      	mov	r0, r6
 8000c26:	f000 f82f 	bl	8000c88 <__malloc_unlock>
 8000c2a:	f104 000b 	add.w	r0, r4, #11
 8000c2e:	1d23      	adds	r3, r4, #4
 8000c30:	f020 0007 	bic.w	r0, r0, #7
 8000c34:	1ac2      	subs	r2, r0, r3
 8000c36:	bf1c      	itt	ne
 8000c38:	1a1b      	subne	r3, r3, r0
 8000c3a:	50a3      	strne	r3, [r4, r2]
 8000c3c:	e7af      	b.n	8000b9e <_malloc_r+0x22>
 8000c3e:	6862      	ldr	r2, [r4, #4]
 8000c40:	42a3      	cmp	r3, r4
 8000c42:	bf0c      	ite	eq
 8000c44:	f8c8 2000 	streq.w	r2, [r8]
 8000c48:	605a      	strne	r2, [r3, #4]
 8000c4a:	e7eb      	b.n	8000c24 <_malloc_r+0xa8>
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	6864      	ldr	r4, [r4, #4]
 8000c50:	e7ae      	b.n	8000bb0 <_malloc_r+0x34>
 8000c52:	463c      	mov	r4, r7
 8000c54:	687f      	ldr	r7, [r7, #4]
 8000c56:	e7b6      	b.n	8000bc6 <_malloc_r+0x4a>
 8000c58:	461a      	mov	r2, r3
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d1fb      	bne.n	8000c58 <_malloc_r+0xdc>
 8000c60:	2300      	movs	r3, #0
 8000c62:	6053      	str	r3, [r2, #4]
 8000c64:	e7de      	b.n	8000c24 <_malloc_r+0xa8>
 8000c66:	230c      	movs	r3, #12
 8000c68:	6033      	str	r3, [r6, #0]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f000 f80c 	bl	8000c88 <__malloc_unlock>
 8000c70:	e794      	b.n	8000b9c <_malloc_r+0x20>
 8000c72:	6005      	str	r5, [r0, #0]
 8000c74:	e7d6      	b.n	8000c24 <_malloc_r+0xa8>
 8000c76:	bf00      	nop
 8000c78:	2000020c 	.word	0x2000020c

08000c7c <__malloc_lock>:
 8000c7c:	4801      	ldr	r0, [pc, #4]	@ (8000c84 <__malloc_lock+0x8>)
 8000c7e:	f7ff bee8 	b.w	8000a52 <__retarget_lock_acquire_recursive>
 8000c82:	bf00      	nop
 8000c84:	20000204 	.word	0x20000204

08000c88 <__malloc_unlock>:
 8000c88:	4801      	ldr	r0, [pc, #4]	@ (8000c90 <__malloc_unlock+0x8>)
 8000c8a:	f7ff bee3 	b.w	8000a54 <__retarget_lock_release_recursive>
 8000c8e:	bf00      	nop
 8000c90:	20000204 	.word	0x20000204

08000c94 <__sfputc_r>:
 8000c94:	6893      	ldr	r3, [r2, #8]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	b410      	push	{r4}
 8000c9c:	6093      	str	r3, [r2, #8]
 8000c9e:	da08      	bge.n	8000cb2 <__sfputc_r+0x1e>
 8000ca0:	6994      	ldr	r4, [r2, #24]
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	db01      	blt.n	8000caa <__sfputc_r+0x16>
 8000ca6:	290a      	cmp	r1, #10
 8000ca8:	d103      	bne.n	8000cb2 <__sfputc_r+0x1e>
 8000caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cae:	f000 bbb3 	b.w	8001418 <__swbuf_r>
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	1c58      	adds	r0, r3, #1
 8000cb6:	6010      	str	r0, [r2, #0]
 8000cb8:	7019      	strb	r1, [r3, #0]
 8000cba:	4608      	mov	r0, r1
 8000cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <__sfputs_r>:
 8000cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	4614      	mov	r4, r2
 8000cca:	18d5      	adds	r5, r2, r3
 8000ccc:	42ac      	cmp	r4, r5
 8000cce:	d101      	bne.n	8000cd4 <__sfputs_r+0x12>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e007      	b.n	8000ce4 <__sfputs_r+0x22>
 8000cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd8:	463a      	mov	r2, r7
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f7ff ffda 	bl	8000c94 <__sfputc_r>
 8000ce0:	1c43      	adds	r3, r0, #1
 8000ce2:	d1f3      	bne.n	8000ccc <__sfputs_r+0xa>
 8000ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ce8 <_vfiprintf_r>:
 8000ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cec:	460d      	mov	r5, r1
 8000cee:	b09d      	sub	sp, #116	@ 0x74
 8000cf0:	4614      	mov	r4, r2
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	b118      	cbz	r0, 8000d00 <_vfiprintf_r+0x18>
 8000cf8:	6a03      	ldr	r3, [r0, #32]
 8000cfa:	b90b      	cbnz	r3, 8000d00 <_vfiprintf_r+0x18>
 8000cfc:	f7ff fd9c 	bl	8000838 <__sinit>
 8000d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d02:	07d9      	lsls	r1, r3, #31
 8000d04:	d405      	bmi.n	8000d12 <_vfiprintf_r+0x2a>
 8000d06:	89ab      	ldrh	r3, [r5, #12]
 8000d08:	059a      	lsls	r2, r3, #22
 8000d0a:	d402      	bmi.n	8000d12 <_vfiprintf_r+0x2a>
 8000d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d0e:	f7ff fea0 	bl	8000a52 <__retarget_lock_acquire_recursive>
 8000d12:	89ab      	ldrh	r3, [r5, #12]
 8000d14:	071b      	lsls	r3, r3, #28
 8000d16:	d501      	bpl.n	8000d1c <_vfiprintf_r+0x34>
 8000d18:	692b      	ldr	r3, [r5, #16]
 8000d1a:	b99b      	cbnz	r3, 8000d44 <_vfiprintf_r+0x5c>
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 fbb8 	bl	8001494 <__swsetup_r>
 8000d24:	b170      	cbz	r0, 8000d44 <_vfiprintf_r+0x5c>
 8000d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d28:	07dc      	lsls	r4, r3, #31
 8000d2a:	d504      	bpl.n	8000d36 <_vfiprintf_r+0x4e>
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	b01d      	add	sp, #116	@ 0x74
 8000d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d36:	89ab      	ldrh	r3, [r5, #12]
 8000d38:	0598      	lsls	r0, r3, #22
 8000d3a:	d4f7      	bmi.n	8000d2c <_vfiprintf_r+0x44>
 8000d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d3e:	f7ff fe89 	bl	8000a54 <__retarget_lock_release_recursive>
 8000d42:	e7f3      	b.n	8000d2c <_vfiprintf_r+0x44>
 8000d44:	2300      	movs	r3, #0
 8000d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d48:	2320      	movs	r3, #32
 8000d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d52:	2330      	movs	r3, #48	@ 0x30
 8000d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f04 <_vfiprintf_r+0x21c>
 8000d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d5c:	f04f 0901 	mov.w	r9, #1
 8000d60:	4623      	mov	r3, r4
 8000d62:	469a      	mov	sl, r3
 8000d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d68:	b10a      	cbz	r2, 8000d6e <_vfiprintf_r+0x86>
 8000d6a:	2a25      	cmp	r2, #37	@ 0x25
 8000d6c:	d1f9      	bne.n	8000d62 <_vfiprintf_r+0x7a>
 8000d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d72:	d00b      	beq.n	8000d8c <_vfiprintf_r+0xa4>
 8000d74:	465b      	mov	r3, fp
 8000d76:	4622      	mov	r2, r4
 8000d78:	4629      	mov	r1, r5
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f7ff ffa1 	bl	8000cc2 <__sfputs_r>
 8000d80:	3001      	adds	r0, #1
 8000d82:	f000 80a7 	beq.w	8000ed4 <_vfiprintf_r+0x1ec>
 8000d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d88:	445a      	add	r2, fp
 8000d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 809f 	beq.w	8000ed4 <_vfiprintf_r+0x1ec>
 8000d96:	2300      	movs	r3, #0
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da0:	f10a 0a01 	add.w	sl, sl, #1
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	9307      	str	r3, [sp, #28]
 8000da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dae:	4654      	mov	r4, sl
 8000db0:	2205      	movs	r2, #5
 8000db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000db6:	4853      	ldr	r0, [pc, #332]	@ (8000f04 <_vfiprintf_r+0x21c>)
 8000db8:	f7ff fa0a 	bl	80001d0 <memchr>
 8000dbc:	9a04      	ldr	r2, [sp, #16]
 8000dbe:	b9d8      	cbnz	r0, 8000df8 <_vfiprintf_r+0x110>
 8000dc0:	06d1      	lsls	r1, r2, #27
 8000dc2:	bf44      	itt	mi
 8000dc4:	2320      	movmi	r3, #32
 8000dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dca:	0713      	lsls	r3, r2, #28
 8000dcc:	bf44      	itt	mi
 8000dce:	232b      	movmi	r3, #43	@ 0x2b
 8000dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dda:	d015      	beq.n	8000e08 <_vfiprintf_r+0x120>
 8000ddc:	9a07      	ldr	r2, [sp, #28]
 8000dde:	4654      	mov	r4, sl
 8000de0:	2000      	movs	r0, #0
 8000de2:	f04f 0c0a 	mov.w	ip, #10
 8000de6:	4621      	mov	r1, r4
 8000de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dec:	3b30      	subs	r3, #48	@ 0x30
 8000dee:	2b09      	cmp	r3, #9
 8000df0:	d94b      	bls.n	8000e8a <_vfiprintf_r+0x1a2>
 8000df2:	b1b0      	cbz	r0, 8000e22 <_vfiprintf_r+0x13a>
 8000df4:	9207      	str	r2, [sp, #28]
 8000df6:	e014      	b.n	8000e22 <_vfiprintf_r+0x13a>
 8000df8:	eba0 0308 	sub.w	r3, r0, r8
 8000dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	9304      	str	r3, [sp, #16]
 8000e04:	46a2      	mov	sl, r4
 8000e06:	e7d2      	b.n	8000dae <_vfiprintf_r+0xc6>
 8000e08:	9b03      	ldr	r3, [sp, #12]
 8000e0a:	1d19      	adds	r1, r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	9103      	str	r1, [sp, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bfbb      	ittet	lt
 8000e14:	425b      	neglt	r3, r3
 8000e16:	f042 0202 	orrlt.w	r2, r2, #2
 8000e1a:	9307      	strge	r3, [sp, #28]
 8000e1c:	9307      	strlt	r3, [sp, #28]
 8000e1e:	bfb8      	it	lt
 8000e20:	9204      	strlt	r2, [sp, #16]
 8000e22:	7823      	ldrb	r3, [r4, #0]
 8000e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e26:	d10a      	bne.n	8000e3e <_vfiprintf_r+0x156>
 8000e28:	7863      	ldrb	r3, [r4, #1]
 8000e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2c:	d132      	bne.n	8000e94 <_vfiprintf_r+0x1ac>
 8000e2e:	9b03      	ldr	r3, [sp, #12]
 8000e30:	1d1a      	adds	r2, r3, #4
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	9203      	str	r2, [sp, #12]
 8000e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e3a:	3402      	adds	r4, #2
 8000e3c:	9305      	str	r3, [sp, #20]
 8000e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f14 <_vfiprintf_r+0x22c>
 8000e42:	7821      	ldrb	r1, [r4, #0]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4650      	mov	r0, sl
 8000e48:	f7ff f9c2 	bl	80001d0 <memchr>
 8000e4c:	b138      	cbz	r0, 8000e5e <_vfiprintf_r+0x176>
 8000e4e:	9b04      	ldr	r3, [sp, #16]
 8000e50:	eba0 000a 	sub.w	r0, r0, sl
 8000e54:	2240      	movs	r2, #64	@ 0x40
 8000e56:	4082      	lsls	r2, r0
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	3401      	adds	r4, #1
 8000e5c:	9304      	str	r3, [sp, #16]
 8000e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e62:	4829      	ldr	r0, [pc, #164]	@ (8000f08 <_vfiprintf_r+0x220>)
 8000e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e68:	2206      	movs	r2, #6
 8000e6a:	f7ff f9b1 	bl	80001d0 <memchr>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d03f      	beq.n	8000ef2 <_vfiprintf_r+0x20a>
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <_vfiprintf_r+0x224>)
 8000e74:	bb1b      	cbnz	r3, 8000ebe <_vfiprintf_r+0x1d6>
 8000e76:	9b03      	ldr	r3, [sp, #12]
 8000e78:	3307      	adds	r3, #7
 8000e7a:	f023 0307 	bic.w	r3, r3, #7
 8000e7e:	3308      	adds	r3, #8
 8000e80:	9303      	str	r3, [sp, #12]
 8000e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e84:	443b      	add	r3, r7
 8000e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e88:	e76a      	b.n	8000d60 <_vfiprintf_r+0x78>
 8000e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e8e:	460c      	mov	r4, r1
 8000e90:	2001      	movs	r0, #1
 8000e92:	e7a8      	b.n	8000de6 <_vfiprintf_r+0xfe>
 8000e94:	2300      	movs	r3, #0
 8000e96:	3401      	adds	r4, #1
 8000e98:	9305      	str	r3, [sp, #20]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 0c0a 	mov.w	ip, #10
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ea6:	3a30      	subs	r2, #48	@ 0x30
 8000ea8:	2a09      	cmp	r2, #9
 8000eaa:	d903      	bls.n	8000eb4 <_vfiprintf_r+0x1cc>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0c6      	beq.n	8000e3e <_vfiprintf_r+0x156>
 8000eb0:	9105      	str	r1, [sp, #20]
 8000eb2:	e7c4      	b.n	8000e3e <_vfiprintf_r+0x156>
 8000eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eb8:	4604      	mov	r4, r0
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e7f0      	b.n	8000ea0 <_vfiprintf_r+0x1b8>
 8000ebe:	ab03      	add	r3, sp, #12
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	462a      	mov	r2, r5
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <_vfiprintf_r+0x228>)
 8000ec6:	a904      	add	r1, sp, #16
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f3af 8000 	nop.w
 8000ece:	4607      	mov	r7, r0
 8000ed0:	1c78      	adds	r0, r7, #1
 8000ed2:	d1d6      	bne.n	8000e82 <_vfiprintf_r+0x19a>
 8000ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ed6:	07d9      	lsls	r1, r3, #31
 8000ed8:	d405      	bmi.n	8000ee6 <_vfiprintf_r+0x1fe>
 8000eda:	89ab      	ldrh	r3, [r5, #12]
 8000edc:	059a      	lsls	r2, r3, #22
 8000ede:	d402      	bmi.n	8000ee6 <_vfiprintf_r+0x1fe>
 8000ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ee2:	f7ff fdb7 	bl	8000a54 <__retarget_lock_release_recursive>
 8000ee6:	89ab      	ldrh	r3, [r5, #12]
 8000ee8:	065b      	lsls	r3, r3, #25
 8000eea:	f53f af1f 	bmi.w	8000d2c <_vfiprintf_r+0x44>
 8000eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ef0:	e71e      	b.n	8000d30 <_vfiprintf_r+0x48>
 8000ef2:	ab03      	add	r3, sp, #12
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <_vfiprintf_r+0x228>)
 8000efa:	a904      	add	r1, sp, #16
 8000efc:	4630      	mov	r0, r6
 8000efe:	f000 f879 	bl	8000ff4 <_printf_i>
 8000f02:	e7e4      	b.n	8000ece <_vfiprintf_r+0x1e6>
 8000f04:	0800181e 	.word	0x0800181e
 8000f08:	08001828 	.word	0x08001828
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	08000cc3 	.word	0x08000cc3
 8000f14:	08001824 	.word	0x08001824

08000f18 <_printf_common>:
 8000f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f1c:	4616      	mov	r6, r2
 8000f1e:	4698      	mov	r8, r3
 8000f20:	688a      	ldr	r2, [r1, #8]
 8000f22:	690b      	ldr	r3, [r1, #16]
 8000f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	bfb8      	it	lt
 8000f2c:	4613      	movlt	r3, r2
 8000f2e:	6033      	str	r3, [r6, #0]
 8000f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f34:	4607      	mov	r7, r0
 8000f36:	460c      	mov	r4, r1
 8000f38:	b10a      	cbz	r2, 8000f3e <_printf_common+0x26>
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	6033      	str	r3, [r6, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	0699      	lsls	r1, r3, #26
 8000f42:	bf42      	ittt	mi
 8000f44:	6833      	ldrmi	r3, [r6, #0]
 8000f46:	3302      	addmi	r3, #2
 8000f48:	6033      	strmi	r3, [r6, #0]
 8000f4a:	6825      	ldr	r5, [r4, #0]
 8000f4c:	f015 0506 	ands.w	r5, r5, #6
 8000f50:	d106      	bne.n	8000f60 <_printf_common+0x48>
 8000f52:	f104 0a19 	add.w	sl, r4, #25
 8000f56:	68e3      	ldr	r3, [r4, #12]
 8000f58:	6832      	ldr	r2, [r6, #0]
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	42ab      	cmp	r3, r5
 8000f5e:	dc26      	bgt.n	8000fae <_printf_common+0x96>
 8000f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	3b00      	subs	r3, #0
 8000f68:	bf18      	it	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	0692      	lsls	r2, r2, #26
 8000f6e:	d42b      	bmi.n	8000fc8 <_printf_common+0xb0>
 8000f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f74:	4641      	mov	r1, r8
 8000f76:	4638      	mov	r0, r7
 8000f78:	47c8      	blx	r9
 8000f7a:	3001      	adds	r0, #1
 8000f7c:	d01e      	beq.n	8000fbc <_printf_common+0xa4>
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	6922      	ldr	r2, [r4, #16]
 8000f82:	f003 0306 	and.w	r3, r3, #6
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf02      	ittt	eq
 8000f8a:	68e5      	ldreq	r5, [r4, #12]
 8000f8c:	6833      	ldreq	r3, [r6, #0]
 8000f8e:	1aed      	subeq	r5, r5, r3
 8000f90:	68a3      	ldr	r3, [r4, #8]
 8000f92:	bf0c      	ite	eq
 8000f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f98:	2500      	movne	r5, #0
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	bfc4      	itt	gt
 8000f9e:	1a9b      	subgt	r3, r3, r2
 8000fa0:	18ed      	addgt	r5, r5, r3
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	341a      	adds	r4, #26
 8000fa6:	42b5      	cmp	r5, r6
 8000fa8:	d11a      	bne.n	8000fe0 <_printf_common+0xc8>
 8000faa:	2000      	movs	r0, #0
 8000fac:	e008      	b.n	8000fc0 <_printf_common+0xa8>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4652      	mov	r2, sl
 8000fb2:	4641      	mov	r1, r8
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	47c8      	blx	r9
 8000fb8:	3001      	adds	r0, #1
 8000fba:	d103      	bne.n	8000fc4 <_printf_common+0xac>
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	e7c6      	b.n	8000f56 <_printf_common+0x3e>
 8000fc8:	18e1      	adds	r1, r4, r3
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	2030      	movs	r0, #48	@ 0x30
 8000fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fd2:	4422      	add	r2, r4
 8000fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fdc:	3302      	adds	r3, #2
 8000fde:	e7c7      	b.n	8000f70 <_printf_common+0x58>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	47c8      	blx	r9
 8000fea:	3001      	adds	r0, #1
 8000fec:	d0e6      	beq.n	8000fbc <_printf_common+0xa4>
 8000fee:	3601      	adds	r6, #1
 8000ff0:	e7d9      	b.n	8000fa6 <_printf_common+0x8e>
	...

08000ff4 <_printf_i>:
 8000ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	7e0f      	ldrb	r7, [r1, #24]
 8000ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ffc:	2f78      	cmp	r7, #120	@ 0x78
 8000ffe:	4691      	mov	r9, r2
 8001000:	4680      	mov	r8, r0
 8001002:	460c      	mov	r4, r1
 8001004:	469a      	mov	sl, r3
 8001006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800100a:	d807      	bhi.n	800101c <_printf_i+0x28>
 800100c:	2f62      	cmp	r7, #98	@ 0x62
 800100e:	d80a      	bhi.n	8001026 <_printf_i+0x32>
 8001010:	2f00      	cmp	r7, #0
 8001012:	f000 80d2 	beq.w	80011ba <_printf_i+0x1c6>
 8001016:	2f58      	cmp	r7, #88	@ 0x58
 8001018:	f000 80b9 	beq.w	800118e <_printf_i+0x19a>
 800101c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001024:	e03a      	b.n	800109c <_printf_i+0xa8>
 8001026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800102a:	2b15      	cmp	r3, #21
 800102c:	d8f6      	bhi.n	800101c <_printf_i+0x28>
 800102e:	a101      	add	r1, pc, #4	@ (adr r1, 8001034 <_printf_i+0x40>)
 8001030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001034:	0800108d 	.word	0x0800108d
 8001038:	080010a1 	.word	0x080010a1
 800103c:	0800101d 	.word	0x0800101d
 8001040:	0800101d 	.word	0x0800101d
 8001044:	0800101d 	.word	0x0800101d
 8001048:	0800101d 	.word	0x0800101d
 800104c:	080010a1 	.word	0x080010a1
 8001050:	0800101d 	.word	0x0800101d
 8001054:	0800101d 	.word	0x0800101d
 8001058:	0800101d 	.word	0x0800101d
 800105c:	0800101d 	.word	0x0800101d
 8001060:	080011a1 	.word	0x080011a1
 8001064:	080010cb 	.word	0x080010cb
 8001068:	0800115b 	.word	0x0800115b
 800106c:	0800101d 	.word	0x0800101d
 8001070:	0800101d 	.word	0x0800101d
 8001074:	080011c3 	.word	0x080011c3
 8001078:	0800101d 	.word	0x0800101d
 800107c:	080010cb 	.word	0x080010cb
 8001080:	0800101d 	.word	0x0800101d
 8001084:	0800101d 	.word	0x0800101d
 8001088:	08001163 	.word	0x08001163
 800108c:	6833      	ldr	r3, [r6, #0]
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6032      	str	r2, [r6, #0]
 8001094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800109c:	2301      	movs	r3, #1
 800109e:	e09d      	b.n	80011dc <_printf_i+0x1e8>
 80010a0:	6833      	ldr	r3, [r6, #0]
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	1d19      	adds	r1, r3, #4
 80010a6:	6031      	str	r1, [r6, #0]
 80010a8:	0606      	lsls	r6, r0, #24
 80010aa:	d501      	bpl.n	80010b0 <_printf_i+0xbc>
 80010ac:	681d      	ldr	r5, [r3, #0]
 80010ae:	e003      	b.n	80010b8 <_printf_i+0xc4>
 80010b0:	0645      	lsls	r5, r0, #25
 80010b2:	d5fb      	bpl.n	80010ac <_printf_i+0xb8>
 80010b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	da03      	bge.n	80010c4 <_printf_i+0xd0>
 80010bc:	232d      	movs	r3, #45	@ 0x2d
 80010be:	426d      	negs	r5, r5
 80010c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010c4:	4859      	ldr	r0, [pc, #356]	@ (800122c <_printf_i+0x238>)
 80010c6:	230a      	movs	r3, #10
 80010c8:	e011      	b.n	80010ee <_printf_i+0xfa>
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	0608      	lsls	r0, r1, #24
 80010d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80010d4:	d402      	bmi.n	80010dc <_printf_i+0xe8>
 80010d6:	0649      	lsls	r1, r1, #25
 80010d8:	bf48      	it	mi
 80010da:	b2ad      	uxthmi	r5, r5
 80010dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80010de:	4853      	ldr	r0, [pc, #332]	@ (800122c <_printf_i+0x238>)
 80010e0:	6033      	str	r3, [r6, #0]
 80010e2:	bf14      	ite	ne
 80010e4:	230a      	movne	r3, #10
 80010e6:	2308      	moveq	r3, #8
 80010e8:	2100      	movs	r1, #0
 80010ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010ee:	6866      	ldr	r6, [r4, #4]
 80010f0:	60a6      	str	r6, [r4, #8]
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	bfa2      	ittt	ge
 80010f6:	6821      	ldrge	r1, [r4, #0]
 80010f8:	f021 0104 	bicge.w	r1, r1, #4
 80010fc:	6021      	strge	r1, [r4, #0]
 80010fe:	b90d      	cbnz	r5, 8001104 <_printf_i+0x110>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d04b      	beq.n	800119c <_printf_i+0x1a8>
 8001104:	4616      	mov	r6, r2
 8001106:	fbb5 f1f3 	udiv	r1, r5, r3
 800110a:	fb03 5711 	mls	r7, r3, r1, r5
 800110e:	5dc7      	ldrb	r7, [r0, r7]
 8001110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001114:	462f      	mov	r7, r5
 8001116:	42bb      	cmp	r3, r7
 8001118:	460d      	mov	r5, r1
 800111a:	d9f4      	bls.n	8001106 <_printf_i+0x112>
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <_printf_i+0x144>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	07df      	lsls	r7, r3, #31
 8001124:	d508      	bpl.n	8001138 <_printf_i+0x144>
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6861      	ldr	r1, [r4, #4]
 800112a:	4299      	cmp	r1, r3
 800112c:	bfde      	ittt	le
 800112e:	2330      	movle	r3, #48	@ 0x30
 8001130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001138:	1b92      	subs	r2, r2, r6
 800113a:	6122      	str	r2, [r4, #16]
 800113c:	f8cd a000 	str.w	sl, [sp]
 8001140:	464b      	mov	r3, r9
 8001142:	aa03      	add	r2, sp, #12
 8001144:	4621      	mov	r1, r4
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fee6 	bl	8000f18 <_printf_common>
 800114c:	3001      	adds	r0, #1
 800114e:	d14a      	bne.n	80011e6 <_printf_i+0x1f2>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	b004      	add	sp, #16
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	4833      	ldr	r0, [pc, #204]	@ (8001230 <_printf_i+0x23c>)
 8001164:	2778      	movs	r7, #120	@ 0x78
 8001166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	6831      	ldr	r1, [r6, #0]
 800116e:	061f      	lsls	r7, r3, #24
 8001170:	f851 5b04 	ldr.w	r5, [r1], #4
 8001174:	d402      	bmi.n	800117c <_printf_i+0x188>
 8001176:	065f      	lsls	r7, r3, #25
 8001178:	bf48      	it	mi
 800117a:	b2ad      	uxthmi	r5, r5
 800117c:	6031      	str	r1, [r6, #0]
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	bf44      	itt	mi
 8001182:	f043 0320 	orrmi.w	r3, r3, #32
 8001186:	6023      	strmi	r3, [r4, #0]
 8001188:	b11d      	cbz	r5, 8001192 <_printf_i+0x19e>
 800118a:	2310      	movs	r3, #16
 800118c:	e7ac      	b.n	80010e8 <_printf_i+0xf4>
 800118e:	4827      	ldr	r0, [pc, #156]	@ (800122c <_printf_i+0x238>)
 8001190:	e7e9      	b.n	8001166 <_printf_i+0x172>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f023 0320 	bic.w	r3, r3, #32
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	e7f6      	b.n	800118a <_printf_i+0x196>
 800119c:	4616      	mov	r6, r2
 800119e:	e7bd      	b.n	800111c <_printf_i+0x128>
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	6825      	ldr	r5, [r4, #0]
 80011a4:	6961      	ldr	r1, [r4, #20]
 80011a6:	1d18      	adds	r0, r3, #4
 80011a8:	6030      	str	r0, [r6, #0]
 80011aa:	062e      	lsls	r6, r5, #24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	d501      	bpl.n	80011b4 <_printf_i+0x1c0>
 80011b0:	6019      	str	r1, [r3, #0]
 80011b2:	e002      	b.n	80011ba <_printf_i+0x1c6>
 80011b4:	0668      	lsls	r0, r5, #25
 80011b6:	d5fb      	bpl.n	80011b0 <_printf_i+0x1bc>
 80011b8:	8019      	strh	r1, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	4616      	mov	r6, r2
 80011c0:	e7bc      	b.n	800113c <_printf_i+0x148>
 80011c2:	6833      	ldr	r3, [r6, #0]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	6032      	str	r2, [r6, #0]
 80011c8:	681e      	ldr	r6, [r3, #0]
 80011ca:	6862      	ldr	r2, [r4, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7fe fffe 	bl	80001d0 <memchr>
 80011d4:	b108      	cbz	r0, 80011da <_printf_i+0x1e6>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	6060      	str	r0, [r4, #4]
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	6123      	str	r3, [r4, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011e4:	e7aa      	b.n	800113c <_printf_i+0x148>
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	4632      	mov	r2, r6
 80011ea:	4649      	mov	r1, r9
 80011ec:	4640      	mov	r0, r8
 80011ee:	47d0      	blx	sl
 80011f0:	3001      	adds	r0, #1
 80011f2:	d0ad      	beq.n	8001150 <_printf_i+0x15c>
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d413      	bmi.n	8001222 <_printf_i+0x22e>
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4298      	cmp	r0, r3
 8001200:	bfb8      	it	lt
 8001202:	4618      	movlt	r0, r3
 8001204:	e7a6      	b.n	8001154 <_printf_i+0x160>
 8001206:	2301      	movs	r3, #1
 8001208:	4632      	mov	r2, r6
 800120a:	4649      	mov	r1, r9
 800120c:	4640      	mov	r0, r8
 800120e:	47d0      	blx	sl
 8001210:	3001      	adds	r0, #1
 8001212:	d09d      	beq.n	8001150 <_printf_i+0x15c>
 8001214:	3501      	adds	r5, #1
 8001216:	68e3      	ldr	r3, [r4, #12]
 8001218:	9903      	ldr	r1, [sp, #12]
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	42ab      	cmp	r3, r5
 800121e:	dcf2      	bgt.n	8001206 <_printf_i+0x212>
 8001220:	e7eb      	b.n	80011fa <_printf_i+0x206>
 8001222:	2500      	movs	r5, #0
 8001224:	f104 0619 	add.w	r6, r4, #25
 8001228:	e7f5      	b.n	8001216 <_printf_i+0x222>
 800122a:	bf00      	nop
 800122c:	0800182f 	.word	0x0800182f
 8001230:	08001840 	.word	0x08001840

08001234 <__sflush_r>:
 8001234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800123c:	0716      	lsls	r6, r2, #28
 800123e:	4605      	mov	r5, r0
 8001240:	460c      	mov	r4, r1
 8001242:	d454      	bmi.n	80012ee <__sflush_r+0xba>
 8001244:	684b      	ldr	r3, [r1, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc02      	bgt.n	8001250 <__sflush_r+0x1c>
 800124a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd48      	ble.n	80012e2 <__sflush_r+0xae>
 8001250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001252:	2e00      	cmp	r6, #0
 8001254:	d045      	beq.n	80012e2 <__sflush_r+0xae>
 8001256:	2300      	movs	r3, #0
 8001258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800125c:	682f      	ldr	r7, [r5, #0]
 800125e:	6a21      	ldr	r1, [r4, #32]
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	d030      	beq.n	80012c6 <__sflush_r+0x92>
 8001264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	0759      	lsls	r1, r3, #29
 800126a:	d505      	bpl.n	8001278 <__sflush_r+0x44>
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	1ad2      	subs	r2, r2, r3
 8001270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001272:	b10b      	cbz	r3, 8001278 <__sflush_r+0x44>
 8001274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	2300      	movs	r3, #0
 800127a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800127c:	6a21      	ldr	r1, [r4, #32]
 800127e:	4628      	mov	r0, r5
 8001280:	47b0      	blx	r6
 8001282:	1c43      	adds	r3, r0, #1
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	d106      	bne.n	8001296 <__sflush_r+0x62>
 8001288:	6829      	ldr	r1, [r5, #0]
 800128a:	291d      	cmp	r1, #29
 800128c:	d82b      	bhi.n	80012e6 <__sflush_r+0xb2>
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <__sflush_r+0x104>)
 8001290:	410a      	asrs	r2, r1
 8001292:	07d6      	lsls	r6, r2, #31
 8001294:	d427      	bmi.n	80012e6 <__sflush_r+0xb2>
 8001296:	2200      	movs	r2, #0
 8001298:	6062      	str	r2, [r4, #4]
 800129a:	04d9      	lsls	r1, r3, #19
 800129c:	6922      	ldr	r2, [r4, #16]
 800129e:	6022      	str	r2, [r4, #0]
 80012a0:	d504      	bpl.n	80012ac <__sflush_r+0x78>
 80012a2:	1c42      	adds	r2, r0, #1
 80012a4:	d101      	bne.n	80012aa <__sflush_r+0x76>
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	b903      	cbnz	r3, 80012ac <__sflush_r+0x78>
 80012aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80012ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ae:	602f      	str	r7, [r5, #0]
 80012b0:	b1b9      	cbz	r1, 80012e2 <__sflush_r+0xae>
 80012b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012b6:	4299      	cmp	r1, r3
 80012b8:	d002      	beq.n	80012c0 <__sflush_r+0x8c>
 80012ba:	4628      	mov	r0, r5
 80012bc:	f7ff fbea 	bl	8000a94 <_free_r>
 80012c0:	2300      	movs	r3, #0
 80012c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80012c4:	e00d      	b.n	80012e2 <__sflush_r+0xae>
 80012c6:	2301      	movs	r3, #1
 80012c8:	4628      	mov	r0, r5
 80012ca:	47b0      	blx	r6
 80012cc:	4602      	mov	r2, r0
 80012ce:	1c50      	adds	r0, r2, #1
 80012d0:	d1c9      	bne.n	8001266 <__sflush_r+0x32>
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0c6      	beq.n	8001266 <__sflush_r+0x32>
 80012d8:	2b1d      	cmp	r3, #29
 80012da:	d001      	beq.n	80012e0 <__sflush_r+0xac>
 80012dc:	2b16      	cmp	r3, #22
 80012de:	d11e      	bne.n	800131e <__sflush_r+0xea>
 80012e0:	602f      	str	r7, [r5, #0]
 80012e2:	2000      	movs	r0, #0
 80012e4:	e022      	b.n	800132c <__sflush_r+0xf8>
 80012e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	e01b      	b.n	8001326 <__sflush_r+0xf2>
 80012ee:	690f      	ldr	r7, [r1, #16]
 80012f0:	2f00      	cmp	r7, #0
 80012f2:	d0f6      	beq.n	80012e2 <__sflush_r+0xae>
 80012f4:	0793      	lsls	r3, r2, #30
 80012f6:	680e      	ldr	r6, [r1, #0]
 80012f8:	bf08      	it	eq
 80012fa:	694b      	ldreq	r3, [r1, #20]
 80012fc:	600f      	str	r7, [r1, #0]
 80012fe:	bf18      	it	ne
 8001300:	2300      	movne	r3, #0
 8001302:	eba6 0807 	sub.w	r8, r6, r7
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	f1b8 0f00 	cmp.w	r8, #0
 800130c:	dde9      	ble.n	80012e2 <__sflush_r+0xae>
 800130e:	6a21      	ldr	r1, [r4, #32]
 8001310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001312:	4643      	mov	r3, r8
 8001314:	463a      	mov	r2, r7
 8001316:	4628      	mov	r0, r5
 8001318:	47b0      	blx	r6
 800131a:	2800      	cmp	r0, #0
 800131c:	dc08      	bgt.n	8001330 <__sflush_r+0xfc>
 800131e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001330:	4407      	add	r7, r0
 8001332:	eba8 0800 	sub.w	r8, r8, r0
 8001336:	e7e7      	b.n	8001308 <__sflush_r+0xd4>
 8001338:	dfbffffe 	.word	0xdfbffffe

0800133c <_fflush_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	690b      	ldr	r3, [r1, #16]
 8001340:	4605      	mov	r5, r0
 8001342:	460c      	mov	r4, r1
 8001344:	b913      	cbnz	r3, 800134c <_fflush_r+0x10>
 8001346:	2500      	movs	r5, #0
 8001348:	4628      	mov	r0, r5
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	b118      	cbz	r0, 8001356 <_fflush_r+0x1a>
 800134e:	6a03      	ldr	r3, [r0, #32]
 8001350:	b90b      	cbnz	r3, 8001356 <_fflush_r+0x1a>
 8001352:	f7ff fa71 	bl	8000838 <__sinit>
 8001356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f3      	beq.n	8001346 <_fflush_r+0xa>
 800135e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001360:	07d0      	lsls	r0, r2, #31
 8001362:	d404      	bmi.n	800136e <_fflush_r+0x32>
 8001364:	0599      	lsls	r1, r3, #22
 8001366:	d402      	bmi.n	800136e <_fflush_r+0x32>
 8001368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800136a:	f7ff fb72 	bl	8000a52 <__retarget_lock_acquire_recursive>
 800136e:	4628      	mov	r0, r5
 8001370:	4621      	mov	r1, r4
 8001372:	f7ff ff5f 	bl	8001234 <__sflush_r>
 8001376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001378:	07da      	lsls	r2, r3, #31
 800137a:	4605      	mov	r5, r0
 800137c:	d4e4      	bmi.n	8001348 <_fflush_r+0xc>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	059b      	lsls	r3, r3, #22
 8001382:	d4e1      	bmi.n	8001348 <_fflush_r+0xc>
 8001384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001386:	f7ff fb65 	bl	8000a54 <__retarget_lock_release_recursive>
 800138a:	e7dd      	b.n	8001348 <_fflush_r+0xc>

0800138c <fiprintf>:
 800138c:	b40e      	push	{r1, r2, r3}
 800138e:	b503      	push	{r0, r1, lr}
 8001390:	4601      	mov	r1, r0
 8001392:	ab03      	add	r3, sp, #12
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <fiprintf+0x20>)
 8001396:	f853 2b04 	ldr.w	r2, [r3], #4
 800139a:	6800      	ldr	r0, [r0, #0]
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f7ff fca3 	bl	8000ce8 <_vfiprintf_r>
 80013a2:	b002      	add	sp, #8
 80013a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80013a8:	b003      	add	sp, #12
 80013aa:	4770      	bx	lr
 80013ac:	20000054 	.word	0x20000054

080013b0 <_putc_r>:
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	460d      	mov	r5, r1
 80013b4:	4614      	mov	r4, r2
 80013b6:	4606      	mov	r6, r0
 80013b8:	b118      	cbz	r0, 80013c2 <_putc_r+0x12>
 80013ba:	6a03      	ldr	r3, [r0, #32]
 80013bc:	b90b      	cbnz	r3, 80013c2 <_putc_r+0x12>
 80013be:	f7ff fa3b 	bl	8000838 <__sinit>
 80013c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013c4:	07d8      	lsls	r0, r3, #31
 80013c6:	d405      	bmi.n	80013d4 <_putc_r+0x24>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	0599      	lsls	r1, r3, #22
 80013cc:	d402      	bmi.n	80013d4 <_putc_r+0x24>
 80013ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013d0:	f7ff fb3f 	bl	8000a52 <__retarget_lock_acquire_recursive>
 80013d4:	68a3      	ldr	r3, [r4, #8]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	60a3      	str	r3, [r4, #8]
 80013dc:	da05      	bge.n	80013ea <_putc_r+0x3a>
 80013de:	69a2      	ldr	r2, [r4, #24]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	db12      	blt.n	800140a <_putc_r+0x5a>
 80013e4:	b2eb      	uxtb	r3, r5
 80013e6:	2b0a      	cmp	r3, #10
 80013e8:	d00f      	beq.n	800140a <_putc_r+0x5a>
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	6022      	str	r2, [r4, #0]
 80013f0:	701d      	strb	r5, [r3, #0]
 80013f2:	b2ed      	uxtb	r5, r5
 80013f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013f6:	07da      	lsls	r2, r3, #31
 80013f8:	d405      	bmi.n	8001406 <_putc_r+0x56>
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	059b      	lsls	r3, r3, #22
 80013fe:	d402      	bmi.n	8001406 <_putc_r+0x56>
 8001400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001402:	f7ff fb27 	bl	8000a54 <__retarget_lock_release_recursive>
 8001406:	4628      	mov	r0, r5
 8001408:	bd70      	pop	{r4, r5, r6, pc}
 800140a:	4629      	mov	r1, r5
 800140c:	4622      	mov	r2, r4
 800140e:	4630      	mov	r0, r6
 8001410:	f000 f802 	bl	8001418 <__swbuf_r>
 8001414:	4605      	mov	r5, r0
 8001416:	e7ed      	b.n	80013f4 <_putc_r+0x44>

08001418 <__swbuf_r>:
 8001418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141a:	460e      	mov	r6, r1
 800141c:	4614      	mov	r4, r2
 800141e:	4605      	mov	r5, r0
 8001420:	b118      	cbz	r0, 800142a <__swbuf_r+0x12>
 8001422:	6a03      	ldr	r3, [r0, #32]
 8001424:	b90b      	cbnz	r3, 800142a <__swbuf_r+0x12>
 8001426:	f7ff fa07 	bl	8000838 <__sinit>
 800142a:	69a3      	ldr	r3, [r4, #24]
 800142c:	60a3      	str	r3, [r4, #8]
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	071a      	lsls	r2, r3, #28
 8001432:	d501      	bpl.n	8001438 <__swbuf_r+0x20>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	b943      	cbnz	r3, 800144a <__swbuf_r+0x32>
 8001438:	4621      	mov	r1, r4
 800143a:	4628      	mov	r0, r5
 800143c:	f000 f82a 	bl	8001494 <__swsetup_r>
 8001440:	b118      	cbz	r0, 800144a <__swbuf_r+0x32>
 8001442:	f04f 37ff 	mov.w	r7, #4294967295
 8001446:	4638      	mov	r0, r7
 8001448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	6922      	ldr	r2, [r4, #16]
 800144e:	1a98      	subs	r0, r3, r2
 8001450:	6963      	ldr	r3, [r4, #20]
 8001452:	b2f6      	uxtb	r6, r6
 8001454:	4283      	cmp	r3, r0
 8001456:	4637      	mov	r7, r6
 8001458:	dc05      	bgt.n	8001466 <__swbuf_r+0x4e>
 800145a:	4621      	mov	r1, r4
 800145c:	4628      	mov	r0, r5
 800145e:	f7ff ff6d 	bl	800133c <_fflush_r>
 8001462:	2800      	cmp	r0, #0
 8001464:	d1ed      	bne.n	8001442 <__swbuf_r+0x2a>
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60a3      	str	r3, [r4, #8]
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	6022      	str	r2, [r4, #0]
 8001472:	701e      	strb	r6, [r3, #0]
 8001474:	6962      	ldr	r2, [r4, #20]
 8001476:	1c43      	adds	r3, r0, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	d004      	beq.n	8001486 <__swbuf_r+0x6e>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	07db      	lsls	r3, r3, #31
 8001480:	d5e1      	bpl.n	8001446 <__swbuf_r+0x2e>
 8001482:	2e0a      	cmp	r6, #10
 8001484:	d1df      	bne.n	8001446 <__swbuf_r+0x2e>
 8001486:	4621      	mov	r1, r4
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff ff57 	bl	800133c <_fflush_r>
 800148e:	2800      	cmp	r0, #0
 8001490:	d0d9      	beq.n	8001446 <__swbuf_r+0x2e>
 8001492:	e7d6      	b.n	8001442 <__swbuf_r+0x2a>

08001494 <__swsetup_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4b29      	ldr	r3, [pc, #164]	@ (800153c <__swsetup_r+0xa8>)
 8001498:	4605      	mov	r5, r0
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	460c      	mov	r4, r1
 800149e:	b118      	cbz	r0, 80014a8 <__swsetup_r+0x14>
 80014a0:	6a03      	ldr	r3, [r0, #32]
 80014a2:	b90b      	cbnz	r3, 80014a8 <__swsetup_r+0x14>
 80014a4:	f7ff f9c8 	bl	8000838 <__sinit>
 80014a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ac:	0719      	lsls	r1, r3, #28
 80014ae:	d422      	bmi.n	80014f6 <__swsetup_r+0x62>
 80014b0:	06da      	lsls	r2, r3, #27
 80014b2:	d407      	bmi.n	80014c4 <__swsetup_r+0x30>
 80014b4:	2209      	movs	r2, #9
 80014b6:	602a      	str	r2, [r5, #0]
 80014b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014bc:	81a3      	strh	r3, [r4, #12]
 80014be:	f04f 30ff 	mov.w	r0, #4294967295
 80014c2:	e033      	b.n	800152c <__swsetup_r+0x98>
 80014c4:	0758      	lsls	r0, r3, #29
 80014c6:	d512      	bpl.n	80014ee <__swsetup_r+0x5a>
 80014c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014ca:	b141      	cbz	r1, 80014de <__swsetup_r+0x4a>
 80014cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014d0:	4299      	cmp	r1, r3
 80014d2:	d002      	beq.n	80014da <__swsetup_r+0x46>
 80014d4:	4628      	mov	r0, r5
 80014d6:	f7ff fadd 	bl	8000a94 <_free_r>
 80014da:	2300      	movs	r3, #0
 80014dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	2300      	movs	r3, #0
 80014e8:	6063      	str	r3, [r4, #4]
 80014ea:	6923      	ldr	r3, [r4, #16]
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	81a3      	strh	r3, [r4, #12]
 80014f6:	6923      	ldr	r3, [r4, #16]
 80014f8:	b94b      	cbnz	r3, 800150e <__swsetup_r+0x7a>
 80014fa:	89a3      	ldrh	r3, [r4, #12]
 80014fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001504:	d003      	beq.n	800150e <__swsetup_r+0x7a>
 8001506:	4621      	mov	r1, r4
 8001508:	4628      	mov	r0, r5
 800150a:	f000 f856 	bl	80015ba <__smakebuf_r>
 800150e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001512:	f013 0201 	ands.w	r2, r3, #1
 8001516:	d00a      	beq.n	800152e <__swsetup_r+0x9a>
 8001518:	2200      	movs	r2, #0
 800151a:	60a2      	str	r2, [r4, #8]
 800151c:	6962      	ldr	r2, [r4, #20]
 800151e:	4252      	negs	r2, r2
 8001520:	61a2      	str	r2, [r4, #24]
 8001522:	6922      	ldr	r2, [r4, #16]
 8001524:	b942      	cbnz	r2, 8001538 <__swsetup_r+0xa4>
 8001526:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800152a:	d1c5      	bne.n	80014b8 <__swsetup_r+0x24>
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	0799      	lsls	r1, r3, #30
 8001530:	bf58      	it	pl
 8001532:	6962      	ldrpl	r2, [r4, #20]
 8001534:	60a2      	str	r2, [r4, #8]
 8001536:	e7f4      	b.n	8001522 <__swsetup_r+0x8e>
 8001538:	2000      	movs	r0, #0
 800153a:	e7f7      	b.n	800152c <__swsetup_r+0x98>
 800153c:	20000054 	.word	0x20000054

08001540 <_sbrk_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d06      	ldr	r5, [pc, #24]	@ (800155c <_sbrk_r+0x1c>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7ff f84a 	bl	80005e4 <_sbrk>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_sbrk_r+0x1a>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_sbrk_r+0x1a>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	20000200 	.word	0x20000200

08001560 <abort>:
 8001560:	b508      	push	{r3, lr}
 8001562:	2006      	movs	r0, #6
 8001564:	f000 f88e 	bl	8001684 <raise>
 8001568:	2001      	movs	r0, #1
 800156a:	f7fe ffc3 	bl	80004f4 <_exit>

0800156e <__swhatbuf_r>:
 800156e:	b570      	push	{r4, r5, r6, lr}
 8001570:	460c      	mov	r4, r1
 8001572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001576:	2900      	cmp	r1, #0
 8001578:	b096      	sub	sp, #88	@ 0x58
 800157a:	4615      	mov	r5, r2
 800157c:	461e      	mov	r6, r3
 800157e:	da0d      	bge.n	800159c <__swhatbuf_r+0x2e>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001586:	f04f 0100 	mov.w	r1, #0
 800158a:	bf14      	ite	ne
 800158c:	2340      	movne	r3, #64	@ 0x40
 800158e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001592:	2000      	movs	r0, #0
 8001594:	6031      	str	r1, [r6, #0]
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	b016      	add	sp, #88	@ 0x58
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	466a      	mov	r2, sp
 800159e:	f000 f879 	bl	8001694 <_fstat_r>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	dbec      	blt.n	8001580 <__swhatbuf_r+0x12>
 80015a6:	9901      	ldr	r1, [sp, #4]
 80015a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015b0:	4259      	negs	r1, r3
 80015b2:	4159      	adcs	r1, r3
 80015b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b8:	e7eb      	b.n	8001592 <__swhatbuf_r+0x24>

080015ba <__smakebuf_r>:
 80015ba:	898b      	ldrh	r3, [r1, #12]
 80015bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015be:	079d      	lsls	r5, r3, #30
 80015c0:	4606      	mov	r6, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	d507      	bpl.n	80015d6 <__smakebuf_r+0x1c>
 80015c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015ca:	6023      	str	r3, [r4, #0]
 80015cc:	6123      	str	r3, [r4, #16]
 80015ce:	2301      	movs	r3, #1
 80015d0:	6163      	str	r3, [r4, #20]
 80015d2:	b003      	add	sp, #12
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	ab01      	add	r3, sp, #4
 80015d8:	466a      	mov	r2, sp
 80015da:	f7ff ffc8 	bl	800156e <__swhatbuf_r>
 80015de:	9f00      	ldr	r7, [sp, #0]
 80015e0:	4605      	mov	r5, r0
 80015e2:	4639      	mov	r1, r7
 80015e4:	4630      	mov	r0, r6
 80015e6:	f7ff fac9 	bl	8000b7c <_malloc_r>
 80015ea:	b948      	cbnz	r0, 8001600 <__smakebuf_r+0x46>
 80015ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f0:	059a      	lsls	r2, r3, #22
 80015f2:	d4ee      	bmi.n	80015d2 <__smakebuf_r+0x18>
 80015f4:	f023 0303 	bic.w	r3, r3, #3
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	81a3      	strh	r3, [r4, #12]
 80015fe:	e7e2      	b.n	80015c6 <__smakebuf_r+0xc>
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	6020      	str	r0, [r4, #0]
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	81a3      	strh	r3, [r4, #12]
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001610:	b15b      	cbz	r3, 800162a <__smakebuf_r+0x70>
 8001612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001616:	4630      	mov	r0, r6
 8001618:	f000 f84e 	bl	80016b8 <_isatty_r>
 800161c:	b128      	cbz	r0, 800162a <__smakebuf_r+0x70>
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	431d      	orrs	r5, r3
 800162e:	81a5      	strh	r5, [r4, #12]
 8001630:	e7cf      	b.n	80015d2 <__smakebuf_r+0x18>

08001632 <_raise_r>:
 8001632:	291f      	cmp	r1, #31
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4605      	mov	r5, r0
 8001638:	460c      	mov	r4, r1
 800163a:	d904      	bls.n	8001646 <_raise_r+0x14>
 800163c:	2316      	movs	r3, #22
 800163e:	6003      	str	r3, [r0, #0]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	bd38      	pop	{r3, r4, r5, pc}
 8001646:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001648:	b112      	cbz	r2, 8001650 <_raise_r+0x1e>
 800164a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800164e:	b94b      	cbnz	r3, 8001664 <_raise_r+0x32>
 8001650:	4628      	mov	r0, r5
 8001652:	f000 f853 	bl	80016fc <_getpid_r>
 8001656:	4622      	mov	r2, r4
 8001658:	4601      	mov	r1, r0
 800165a:	4628      	mov	r0, r5
 800165c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001660:	f000 b83a 	b.w	80016d8 <_kill_r>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00a      	beq.n	800167e <_raise_r+0x4c>
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	d103      	bne.n	8001674 <_raise_r+0x42>
 800166c:	2316      	movs	r3, #22
 800166e:	6003      	str	r3, [r0, #0]
 8001670:	2001      	movs	r0, #1
 8001672:	e7e7      	b.n	8001644 <_raise_r+0x12>
 8001674:	2100      	movs	r1, #0
 8001676:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800167a:	4620      	mov	r0, r4
 800167c:	4798      	blx	r3
 800167e:	2000      	movs	r0, #0
 8001680:	e7e0      	b.n	8001644 <_raise_r+0x12>
	...

08001684 <raise>:
 8001684:	4b02      	ldr	r3, [pc, #8]	@ (8001690 <raise+0xc>)
 8001686:	4601      	mov	r1, r0
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	f7ff bfd2 	b.w	8001632 <_raise_r>
 800168e:	bf00      	nop
 8001690:	20000054 	.word	0x20000054

08001694 <_fstat_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d07      	ldr	r5, [pc, #28]	@ (80016b4 <_fstat_r+0x20>)
 8001698:	2300      	movs	r3, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	602b      	str	r3, [r5, #0]
 80016a2:	f7fe ff77 	bl	8000594 <_fstat>
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	d102      	bne.n	80016b0 <_fstat_r+0x1c>
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	b103      	cbz	r3, 80016b0 <_fstat_r+0x1c>
 80016ae:	6023      	str	r3, [r4, #0]
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	20000200 	.word	0x20000200

080016b8 <_isatty_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d06      	ldr	r5, [pc, #24]	@ (80016d4 <_isatty_r+0x1c>)
 80016bc:	2300      	movs	r3, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	f7fe ff76 	bl	80005b4 <_isatty>
 80016c8:	1c43      	adds	r3, r0, #1
 80016ca:	d102      	bne.n	80016d2 <_isatty_r+0x1a>
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	b103      	cbz	r3, 80016d2 <_isatty_r+0x1a>
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	bd38      	pop	{r3, r4, r5, pc}
 80016d4:	20000200 	.word	0x20000200

080016d8 <_kill_r>:
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4d07      	ldr	r5, [pc, #28]	@ (80016f8 <_kill_r+0x20>)
 80016dc:	2300      	movs	r3, #0
 80016de:	4604      	mov	r4, r0
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	f7fe fef5 	bl	80004d4 <_kill>
 80016ea:	1c43      	adds	r3, r0, #1
 80016ec:	d102      	bne.n	80016f4 <_kill_r+0x1c>
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	b103      	cbz	r3, 80016f4 <_kill_r+0x1c>
 80016f2:	6023      	str	r3, [r4, #0]
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	20000200 	.word	0x20000200

080016fc <_getpid_r>:
 80016fc:	f7fe bee2 	b.w	80004c4 <_getpid>

08001700 <_init>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr

0800170c <_fini>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr
